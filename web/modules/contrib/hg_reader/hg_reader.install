<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Symfony\Component\Yaml\Yaml;
use Drupal\hg_reader\Entity\HgImporter;
use Drupal\hg_reader\Controller\HgImporterController;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\Core\Datetime\DateFormatInterface;
use Drupal\Core\KeyValueStore\KeyValueStoreInterface;

/**
 * hg_reader_install
 *
 * Set fresh_install flag to true.
 */
function hg_reader_install() {
  $config = \Drupal::service('config.factory')->getEditable('hg_reader.settings');
  $config->set('fresh_install', TRUE)->save();
}

/**
 * hg_reader_uninstall
 *
 * Delete various hg_reader settings.
 */
function hg_reader_uninstall() {
  // Delete all of the entity definitions.
  $keys = \Drupal::keyValue('entity.definitions.installed');
  $keys->delete('feeds_feed.entity_type');
  $keys->delete('feeds_feed.field_storage_definitions');
  $keys->delete('feeds_feed_type.entity_type');
  $keys->delete('feeds_subscription.entity_type');
  $keys->delete('feeds_subscription.field_storage_definitions');

  drupal_flush_all_caches();
}

/**
 * hg_reader_requirements
 *
 * @param string $phase
 * @return array
 */
function hg_reader_requirements($phase) {
	$requirements = [];

	// Checking `mercury_news` specifically becuase of hg_reader_update_8002
	if ($phase == 'runtime' && \Drupal\node\Entity\NodeType::load('mercury_news') ) {
		$requirements['hg_reader'] = [
			'title' => t('Mercury Reader'),
			'severity' => REQUIREMENT_ERROR,
			'description' => t("Mercury Reader has <a href='@url'>outdated content types</a>. Please re-install Mercury Reader to install the proper content types.", array('@url' => "https://github.gatech.edu/ICWebTeam/hg_reader/issues/21" ))
		];
	}

	return $requirements;
}

/**
 * Helper function for config updates.
 *
 */
function _hg_reader_update_config($configsNames) {
  $config_path    = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
  $source         = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_factory = \Drupal::configFactory();
  $uuid_service = \Drupal::service('uuid');

  foreach ($configsNames as $name) {
    $config_storage->write($name, $source->read($name));
    $config_factory->getEditable($name)->set('uuid', $uuid_service->generate())->save();
  }
}

/**
 * hg_reader_update_8001
 *
 * Create hg_reader_log table.
 */
function hg_reader_update_8001(&$sandbox) {
  $spec = [
    'description' => 'Stores log entries for Mercury Reader-created nodes.',
    'fields' => [
      'nid' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Mercury node nid",
      ],
      'timestamp' => [
        'description' => 'The Unix timestamp when the node was viewed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ]
  ];

  $schema = Database::getConnection()->schema();
  $schema->createTable('hg_reader_log', $spec);
}

/**
 * hg_reader_update_8002
 *
 * Adds a YouTube field to the news node type.
 */
function hg_reader_update_8002() {
  $message = NULL;

  $entitytypes_fields = [
    'node' => [
      'hg_news' => [
        'field_hg_youtube_video',
      ],
    ]
  ];

  _ensure_fields($entitytypes_fields);
  return $message;
}

/**
 * Helper function for 8002. Creates field storage if it doesn't exist.
 *
 * @param array $entitytypes_fields
 *
 */
function _ensure_fields(array $entitytypes_fields) {
  $modulePath = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader');
  $config_directory = new FileStorage($modulePath . '/config/install');

  foreach ($entitytypes_fields as $entitytype => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field) {
        $field_storage_name = 'field.storage.' . $entitytype . '.' . $field;
        $config_record = $config_directory->read($field_storage_name);
        if (!FieldStorageConfig::loadByName($config_record['entity_type'], $config_record['field_name'])) {
          FieldStorageConfig::create($config_record)->save();
        }

        $field_config_name = 'field.field.' . $entitytype . '.' . $bundle . '.' . $field;
        $config_record = $config_directory->read($field_config_name);
        if (!FieldConfig::loadByName($config_record['entity_type'], $config_record['bundle'], $config_record['field_name'])) {
          FieldConfig::create($config_record)->save();
        }
      }
    }
  }
}

/**
 * hg_reader_update_8003
 *
 * Rebuilds taxonomy terms for orphaned metadata entities. This should have been
 * a post update hook but it's been in here for a while so we're sticking with it.
 */
function hg_reader_update_8003(&$sandbox) {
  $count_node = 0;
  $count_tax = 0;

  // Query all hg_reader content types
  $nids = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', ['hg_event', 'hg_news'], 'IN')
      ->execute();

  if (!empty($nids)) {
    $hg_fields = [
      'field_hg_keywords' => 'hg_keywords',
      'field_hg_categories' => 'hg_categories',
      'field_hg_news_room_topics' => 'hg_news_room_topics',
      'field_hg_newsroom_topics' => 'hg_newsroom_topics',
      'field_hg_event_categories' => 'hg_event_categories',
      'field_hg_invited_audience' => 'hg_invited_audience'
    ];

    // Now, go into each entity.
    foreach ($nids as $nid) {
      $bool_update = false;
      $node = Node::load($nid);

      if ($node instanceof \Drupal\node\NodeInterface) {
        foreach ($hg_fields as $hg_field => $hg_field_vocab) {
          // checking if field exists on entity
          if ($node->hasField($hg_field)) {

            // loading hg_field_vocab into a vid
            $vocab_id = Vocabulary::load($hg_field_vocab)->id();

            // Checking field reference value
            $categories = $node->$hg_field->getValue();
            if (!empty($categories)) {
              foreach ($categories as $category) {
                // Load the taxonomy term based on id
                $term = Term::load($category['target_id']);

                // Checking vocabulary of term
		            if (is_null($term)) { continue; }
                if ($term->bundle() != $vocab_id) {
                  // Check to see if term exists in the current vocabulary
                  $term_exists_in_vocab = taxonomy_term_load_multiple_by_name($term->getName(),$vocab_id);
                  // If empty, then term does not exist in vocab, so build
                  if(empty($term_exists_in_vocab)){
                    // VIDs don't match, so recreate term in $vocab_id
                    $term_new = Term::create([
                      'name' => $term->getName(),
                      'vid' => $vocab_id,
                    ]);
                    // save term
                    $term_new->save();
                    $count_tax++;
                  }
                  // Term exists, so ignore and
                  else {
                    $term_new = current($term_exists_in_vocab);
                  }

                  // Finally, replace Tax reference with the newly created entity
                  // sourced from https://drupal.stackexchange.com/questions/262090/how-do-i-programmatically-delete-a-reference-field-values
                  $key = array_search(current($category), array_column($categories, key($category)));
                  $node->get($hg_field)->removeItem($key);

                  // now, replace that relationship
                  $node->get($hg_field)->appendItem(['target_id' => $term_new->id()]);
                  \Drupal::logger('hg_reader')->notice('Updated [tid=' . $term_new->id() . ']' . $term_new->getName() . ' for [nid=' . $node->id() . ']' . $node->label());
                  $bool_update = true;
                }
              }
            }
          }

          if ($bool_update){
            // Now, save.
            $node->save();
            \Drupal::logger('hg_reader')->notice('Updated [nid=' . $node->id() . ']' . $node->label());
            $count_node++;
          }
        }
      }
    }
  }
  \Drupal::messenger()->addMessage(t('Recreated <em>@name</em> terms across @count content.', array('@name' => $count_tax, '@count' => $count_node)), 'status');
}

/**
 * hg_reader_update_8004
 *
 * Support for videos in hg_news
 */
function hg_reader_update_8004(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
	$source = new FileStorage($config_path);
	$config_storage = \Drupal::service('config.storage');
	$config_storage->write('core.entity_form_display.node.hg_news.default', $source->read('core.entity_form_display.node.hg_news.default'));
}

/**
 * hg_reader_update_8005
 *
 * Modifying default events view and event teaser displays
 */
function hg_reader_update_8005(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
	$source = new FileStorage($config_path);
	$config_storage = \Drupal::service('config.storage');
  $config_storage->write('core.entity_view_display.node.hg_event.teaser', $source->read('core.entity_view_display.node.hg_event.teaser'));
  $config_storage->write('views.view.hg_events', $source->read('views.view.hg_events'));
}

/**
 * hg_reader_update_8006
 *
 * Install Twig Tweak, update views, update news teaser.
 */
function hg_reader_update_8006(&$sandbox) {
  \Drupal::service('module_installer')->install(['twig_tweak'], TRUE);

  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
	$source = new FileStorage($config_path);
	$config_storage = \Drupal::service('config.storage');
  $config_storage->write('core.entity_view_display.node.hg_news.teaser', $source->read('core.entity_view_display.node.hg_news.teaser'));
  $config_storage->write('views.view.hg_events', $source->read('views.view.hg_events'));
  $config_storage->write('views.view.hg_news', $source->read('views.view.hg_news'));
}

/**
 * hg_reader_update_8007
 *
 * Support for new profile fields
 */
function hg_reader_update_8007(&$sandbox) {
  \Drupal::service('module_installer')->install(['media'], TRUE);
  \Drupal::service('module_installer')->install(['media_library'], TRUE);

  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
  $config_manager = Drupal::service('config.manager');
	$source = new FileStorage($config_path);
	$config_storage = \Drupal::service('config.storage');
  $entity_type_manager = Drupal::entityTypeManager();

  // These are all fields so we only need to look up the entity type once.
  $entity_type = $config_manager->getEntityTypeIdByName('field.storage.node.field_hg_college_school');
  $storage = $entity_type_manager->getStorage($entity_type);
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_college_school'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_department'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_expertise'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_linkedin'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_media'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_recent_appearances'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_specialty'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_twitter'))->save();

  // These are different though.
  $entity_type = $config_manager->getEntityTypeIdByName('field.storage.media.field_media_hg_image');
  $storage = $entity_type_manager->getStorage($entity_type);
  $entity = $storage->createFromStorageRecord($source->read('field.storage.media.field_media_hg_image'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.media.field_media_hg_video'))->save();

  $config_storage->write('core.entity_form_display.media.hg_image.default', $source->read('core.entity_form_display.media.hg_image.default'));
  $config_storage->write('core.entity_form_display.media.hg_video.default', $source->read('core.entity_form_display.media.hg_video.default'));
  $config_storage->write('core.entity_form_display.media.hg_video.media_library', $source->read('core.entity_form_display.media.hg_video.media_library'));
  $config_storage->write('core.entity_form_display.node.hg_profile.default', $source->read('core.entity_form_display.node.hg_profile.default'));
  $config_storage->write('core.entity_view_display.media.hg_image.default', $source->read('core.entity_view_display.media.hg_image.default'));
  $config_storage->write('core.entity_view_display.media.hg_video.default', $source->read('core.entity_view_display.media.hg_video.default'));
  $config_storage->write('core.entity_view_display.media.hg_video.media_library', $source->read('core.entity_view_display.media.hg_video.media_library'));
  $config_storage->write('core.entity_view_display.node.hg_profile.default', $source->read('core.entity_view_display.node.hg_profile.default'));
  $config_storage->write('core.entity_view_display.node.hg_profile.teaser', $source->read('core.entity_view_display.node.hg_profile.teaser'));
  $config_storage->write('field.field.media.hg_image.field_media_hg_image', $source->read('field.field.media.hg_image.field_media_hg_image'));
  $config_storage->write('field.field.media.hg_video.field_media_hg_video', $source->read('field.field.media.hg_video.field_media_hg_video'));
  $config_storage->write('field.field.node.hg_profile.field_hg_college_school', $source->read('field.field.node.hg_profile.field_hg_college_school'));
  $config_storage->write('field.field.node.hg_profile.field_hg_department', $source->read('field.field.node.hg_profile.field_hg_department'));
  $config_storage->write('field.field.node.hg_profile.field_hg_expertise', $source->read('field.field.node.hg_profile.field_hg_expertise'));
  $config_storage->write('field.field.node.hg_profile.field_hg_linkedin', $source->read('field.field.node.hg_profile.field_hg_linkedin'));
  $config_storage->write('field.field.node.hg_profile.field_hg_media', $source->read('field.field.node.hg_profile.field_hg_media'));
  $config_storage->write('field.field.node.hg_profile.field_hg_recent_appearances', $source->read('field.field.node.hg_profile.field_hg_recent_appearances'));
  $config_storage->write('field.field.node.hg_profile.field_hg_related_files', $source->read('field.field.node.hg_profile.field_hg_related_files'));
  $config_storage->write('field.field.node.hg_profile.field_hg_specialty', $source->read('field.field.node.hg_profile.field_hg_specialty'));
  $config_storage->write('field.field.node.hg_profile.field_hg_twitter', $source->read('field.field.node.hg_profile.field_hg_twitter'));
  $config_storage->write('field.field.node.hg_news.field_hg_youtube_video', $source->read('field.field.node.hg_news.field_hg_youtube_video'));
  $config_storage->write('media.type.hg_image', $source->read('media.type.hg_image'));
  $config_storage->write('media.type.hg_video', $source->read('media.type.hg_video'));
  $config_storage->write('taxonomy.vocabulary.hg_areas_of_expertise', $source->read('taxonomy.vocabulary.hg_areas_of_expertise'));
}

/**
 * hg_reader_update_8008
 *
 * Support for new group field
 */
function hg_reader_update_8008(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
  $config_manager = Drupal::service('config.manager');
	$source = new FileStorage($config_path);
	$config_storage = \Drupal::service('config.storage');
  $entity_type_manager = Drupal::entityTypeManager();

  // These are all fields so we only need to look up the entity type once.
  $entity_type = $config_manager->getEntityTypeIdByName('field.storage.node.field_hg_groups');
  $storage = $entity_type_manager->getStorage($entity_type);
  $entity = $storage->createFromStorageRecord($source->read('field.storage.node.field_hg_groups'))->save();

  $config_storage->write('field.field.node.hg_event.field_hg_groups', $source->read('field.field.node.hg_event.field_hg_groups'));
  $config_storage->write('core.entity_form_display.node.hg_event.default', $source->read('core.entity_form_display.node.hg_event.default'));
  $config_storage->write('core.entity_view_display.node.hg_event.default', $source->read('core.entity_view_display.node.hg_event.default'));
  $config_storage->write('core.entity_view_display.node.hg_event.teaser', $source->read('core.entity_view_display.node.hg_event.teaser'));
}

/**
 * hg_reader_update_8009
 *
 * Update extras field to increase cardinality to unlimited.
 */
function hg_reader_update_8009(&$sandbox) {
  // Can't believe it takes this much code to do such a simple thing.
  \Drupal::service('module_installer')->install(['twig_field_value'], TRUE);

  $database = \Drupal::database();
  // Retrieve existing field data.
  $entity_type = 'node';
  $field = 'field_hg_extras';
  $tables = [
    "{$entity_type}__$field",
    "{$entity_type}_revision__$field",
  ];
  $existing_data = [];
  foreach ($tables as $table) {
    // Get the old data.
    $existing_data[$table] = $database->select($table)
      ->fields($table)
      ->execute()
      ->fetchAll(PDO::FETCH_ASSOC);

    // Wipe it.
    $database->truncate($table)->execute();
  }

  $field_storage_configs = \Drupal::entityTypeManager()
    ->getStorage('field_storage_config')
    ->loadByProperties([
      'field_name' => $field,
    ]);
  foreach ($field_storage_configs as $field_storage) {
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['settings']['cardinality'] = -1;

    $new_field_storage = FieldStorageConfig::create($new_field_storage);
    $new_field_storage->original = $new_field_storage;
    $new_field_storage->enforceIsNew(FALSE);
    $new_field_storage->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
    $new_field_storage->save();
  }

  // Restore the data.
  foreach ($tables as $table) {
    if (!empty($existing_data[$table])) {
      $insert_query = $database
        ->insert($table)
        ->fields(array_keys(end($existing_data[$table])));
      foreach ($existing_data[$table] as $row) {
        $insert_query->values(array_values($row));
      }
      $insert_query->execute();
    }
  }

  // write some changes to the events view
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
	$source = new FileStorage($config_path);
	$config_storage = \Drupal::service('config.storage');
  $config_storage->write('views.view.hg_events', $source->read('views.view.hg_events'));
  $config_storage->write('views.view.hg_news', $source->read('views.view.hg_news'));
}

/**
 * Add new action configurations.
 */
function example_update_8010() {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'hg_reader') . '/config/install';
  $config_manager = Drupal::service('config.manager');
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $entity_type_manager = Drupal::entityTypeManager();

  // These are all media fields so we only need to look up the entity type once.
  $entity_type = $config_manager->getEntityTypeIdByName('field.storage.media.field_media_hg_image');
  $storage = $entity_type_manager->getStorage($entity_type);
  $entity = $storage->createFromStorageRecord($source->read('field.storage.media.field_hg_media_description'))->save();
  $entity = $storage->createFromStorageRecord($source->read('field.storage.media.field_mercury_id'))->save();

  $configsNames = [
    'core.entity_form_display.node.hg_profile.default',
    'core.entity_view_display.node.hg_profile.default',
    'core.entity_view_display.node.hg_profile.teaser',
    'field.field.media.hg_image.field_media_hg_image',
    'field.field.media.hg_video.field_media_hg_video',
    'field.field.node.hg_event.field_hg_groups',
    'field.field.node.hg_event.field_hg_related_files',
    'field.field.node.hg_external_news.field_hg_related_files',
    'field.field.node.hg_news.field_hg_related_files',
    'media.type.hg_image',
    'media.type.hg_video',
  ];

  _hg_reader_update_config($configsNames);

  return 'Added new configurations.';
}

/**
 * Configs for phasing out images/videos in favor of media entities.
 */
function hg_reader_update_8011() {
  $config_path = Drupal::service('extension.list.module')->getPath('hg_reader') . '/config/install';
  $config_manager = Drupal::service('config.manager');
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $entity_type_manager = Drupal::entityTypeManager();

  // These are all fields so we only need to look up the entity type once.

  $configsNames = [
    'core.entity_form_display.media.hg_video.media_library',
    'core.entity_form_display.media.hg_video.default',
    'core.entity_form_display.media.hg_image.default',
    'core.entity_form_display.node.hg_event.default',
    'core.entity_form_display.node.hg_news.default',
    'core.entity_view_display.media.hg_image.default',
    'core.entity_view_display.media.hg_video.default',
    'core.entity_view_display.media.hg_video.media_library',
    'core.entity_view_display.node.hg_event.teaser',
    'core.entity_view_display.node.hg_event.default',
    'core.entity_view_display.node.hg_news.teaser',
    'core.entity_view_display.node.hg_news.default',
    'field.field.node.hg_news.field_hg_media',
    'field.field.node.hg_event.field_hg_media',
    'field.field.media.hg_video.field_mercury_id',
    'field.field.media.hg_image.field_mercury_id',
    'field.field.media.hg_image.field_hg_media_description'
  ];

  _hg_reader_update_config($configsNames);

  // Add a primary key to the hg_reader_log so the status page will stop griping.
  $schema = Database::getConnection()->schema();
  try {
    $schema->addPrimaryKey('hg_reader_log', ['nid', 'timestamp']);
    $keymessage = ' Added primary key to hg_reader_log table.';
  } catch (Exception $e) {
    $keymessage = ' Log key already exists.';
  }

  return 'Added new configurations.' . $keymessage;
}

/**
 * Rebuilt entity bundle field map since successive updates have munged it to death.
 */
function hg_reader_update_8012() {
  // Add bundle_field mapping for field_hg_media.
  $map = \Drupal::keyValue('entity.definitions.bundle_field_map');

  // Node fields first.
  $node_map = $map->get('node');

  $node_map['field_hg_media'] = array(
    'type' => 'entity_reference',
    'bundles' => array(
      'hg_event' => 'hg_event',
      'hg_news' => 'hg_news',
      'hg_profile' => 'hg_profile',
    ),
  );
  $node_map['field_hg_college_school'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_profile' => 'hg_profile',
    ),
  );
  $node_map['field_hg_department'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_profile' => 'hg_profile',
    ),
  );
  $node_map['field_hg_expertise'] = array(
    'type' => 'entity_reference',
    'bundles' => array(
      'hg_profile' => 'hg_profile',
    ),
  );
  $node_map['field_hg_linkedin'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_profile' => 'hg_profile',
    ),
  );
  $node_map['field_hg_recent_appearances'] = array(
    'type' => 'entity_reference',
    'bundles' => array(
      'hg_profile' => 'hg_profile',
    ),
  );
  $node_map['field_hg_specialty'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_profile' => 'hg_profile',
    ),
  );
  $node_map['field_hg_twitter'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_profile' => 'hg_profile',
    ),
  );

  $map->set('node', $node_map);

  // A couple media fields too.
  $node_map = $map->get('media');

  $node_map['field_hg_media_description'] = array(
    'type' => 'text_long',
    'bundles' => array(
      'hg_image' => 'hg_image',
    ),
  );
  $node_map['field_media_hg_image'] = array(
    'type' => 'image',
    'bundles' => array(
      'hg_image' => 'hg_image',
    ),
  );
  $node_map['field_media_hg_video'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_image' => 'hg_image',
    ),
  );
  $node_map['field_mercury_id'] = array(
    'type' => 'entity_reference',
    'bundles' => array(
      'hg_image' => 'hg_image',
    ),
  );

  $map->set('media', $node_map);

  // Rebuild the persistent map.
  $entity_bundle_info = \Drupal::service('entity_type.bundle.info');
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $entity_field_manager = \Drupal::service('entity_field.manager');

  $map = [];
  foreach ($entity_type_manager->getDefinitions() as $entity_type_id => $entity_type) {
    if (!$entity_type->entityClassImplements(FieldableEntityInterface::class)) {
      continue;
    }
    foreach ($entity_bundle_info->getBundleInfo($entity_type_id) as $bundle => $bundle_info) {
      foreach ($entity_field_manager->getFieldDefinitions($entity_type_id, $bundle) as $field_name => $field_definition) {
        if (!$field_definition->getFieldStorageDefinition()->isBaseField()) {
          $map[$entity_type_id][$field_name]['type'] = $field_definition->getType();
          $map[$entity_type_id][$field_name]['bundles'][$bundle] = $bundle;
        }
      }
    }
  }

  $persistent_map = \Drupal::keyValue('entity.definitions.bundle_field_map');
  $persistent_map->setMultiple($map);
}

/**
 * Remove all field mappings erroneously added in the previous iteration of 8012
 *
 */
function hg_reader_update_8013() {
  $map = \Drupal::keyValue('entity.definitions.bundle_field_map');

  // One erroneous node field mapping
  $node_map = $map->get('node');

  $node_map['field_hg_media'] = array(
    'type' => 'entity_reference',
    'bundles' => array (
        'hg_event' => 'hg_event',
        'hg_news' => 'hg_news',
        'hg_profile' => 'hg_profile',
    ),
  );

  $map->set('node', $node_map);

  // A whole bunch of erroneous media field mappings
  $node_map = $map->get('media');

  unset($node_map['field_decade']);
  unset($node_map['field_year']);
  unset($node_map['field_link']);
  unset($node_map['field_hg_summary_sentence']);
  unset($node_map['field_hg_related_links']);
  unset($node_map['field_hg_related_files']);
  unset($node_map['field_hg_location_url']);
  unset($node_map['field_hg_location_email']);
  unset($node_map['field_hg_location']);
  unset($node_map['field_hg_images']);
  unset($node_map['field_hg_fee']);
  unset($node_map['field_hg_subtitle']);
  unset($node_map['field_hg_email']);
  unset($node_map['field_hg_zip_code']);
  unset($node_map['field_hg_url']);
  unset($node_map['field_hg_street_address']);
  unset($node_map['field_hg_secondary_email']);
  unset($node_map['field_hg_primary_email']);
  unset($node_map['field_hg_nickname']);
  unset($node_map['field_hg_middle_name']);
  unset($node_map['field_hg_last_name']);
  unset($node_map['field_hg_job_title']);
  unset($node_map['field_hg_first_name']);
  unset($node_map['field_hg_city']);
  unset($node_map['field_hg_alternate_job_title']);
  unset($node_map['field_hg_youtube_id']);
  unset($node_map['field_hg_state']);
  unset($node_map['field_hg_degree']);
  unset($node_map['field_hg_event_time']);
  unset($node_map['field_hg_publication']);
  unset($node_map['field_hg_dateline']);
  unset($node_map['field_hg_article_url']);
  unset($node_map['field_hg_classification']);
  unset($node_map['field_hg_extras']);
  unset($node_map['field_hg_categories']);
  unset($node_map['field_hg_core_research_areas']);
  unset($node_map['field_hg_event_categories']);
  unset($node_map['field_hg_invited_audience']);
  unset($node_map['field_hg_keywords']);
  unset($node_map['field_hg_news_room_topics']);
  unset($node_map['field_hg_phone_number']);
  unset($node_map['field_hg_mobile_phone']);
  unset($node_map['field_hg_fax_number']);
  unset($node_map['field_hg_location_phone']);
  unset($node_map['field_hg_teaching']);
  unset($node_map['field_hg_summary']);
  unset($node_map['field_hg_research']);
  unset($node_map['field_hg_sidebar']);
  unset($node_map['field_hg_contact']);
  unset($node_map['field_hg_youtube_video']);
  unset($node_map['field_hg_media']);
  unset($node_map['field_hg_college_school']);
  unset($node_map['field_hg_department']);
  unset($node_map['field_hg_expertise']);
  unset($node_map['field_hg_linkedin']);
  unset($node_map['field_hg_recent_appearances']);
  unset($node_map['field_hg_specialty']);
  unset($node_map['field_hg_twitter']);
  unset($node_map['field_image']);
  unset($node_map['comment']);
  unset($node_map['field_tags']);
  unset($node_map['body']);
  unset($node_map['layout_builder__layout']);
  unset($node_map['field_hg_source_updated']);
  unset($node_map['field_hg_importer']);
  unset($node_map['field_hg_id']);

  $node_map['field_media_hg_video'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_video' => 'hg_video',
    ),
  );
  $node_map['field_mercury_id'] = array(
    'type' => 'string',
    'bundles' => array(
      'hg_image' => 'hg_image',
      'hg_video' => 'hg_video',
    ),
  );

  $map->set('media', $node_map);
}

/**
 * Remove any erroneously added duplicate taxonomy terms
 *
 */
function hg_reader_update_8014() {
  $vocabs = ['hg_categories', 'hg_core_research_areas', 'hg_event_categories', 'hg_invited_audience', 'hg_keywords','hg_news_room_topics'];
  $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  // Loop through vocabs and deal with each one.
  foreach ($vocabs as $vocab) {
    // Get an array of terms in which each is the lowest ID'd instance.
    $query = \Drupal::database()->select('taxonomy_term_field_data', 'tfd');
    $query->addExpression('MIN(tfd.tid)', 'min');
    $query->fields('tfd', ['name'])
          ->condition('tfd.vid', $vocab)
          ->groupBy('tfd.name');
    $terms = $query->execute()->fetchAll();

    // Loop through terms and delete all but the lowest instance.
    foreach ($terms as $term) {
      $tids = \Drupal::entityQuery('taxonomy_term')
        ->accessCheck(TRUE)
        ->condition('vid', $vocab)
        ->condition('name', $term->name)
        ->condition('tid', $term->min, '<>')
        ->execute();
      $entities = $controller->loadMultiple($tids);
      $controller->delete($entities);
      $keepers[] = $term->min;
    }

    // We also need to delete references to the terms we just deleted.
    $field = \Drupal::database()
      ->delete('node__field_' . $vocab)
      ->condition('field_' . $vocab . '_target_id', $keepers, 'NOT IN')
      ->execute();
    $revision = \Drupal::database()
      ->delete('node_revision__field_' . $vocab)
      ->condition('field_' . $vocab . '_target_id', $keepers, 'NOT IN')
      ->execute();
  }
}

/**
 * support for changes to media (videos) and news entity display
 */
function hg_reader_update_8015() {
  $config_path = Drupal::service('extension.list.module')->getPath('hg_reader') . '/config/install';
	$source = new FileStorage($config_path);
	$config_storage = \Drupal::service('config.storage');
  $config_storage->write('core.entity_form_display.node.hg_news.default', $source->read('core.entity_form_display.node.hg_news.default'));
  $config_storage->write('core.entity_view_display.node.hg_news.default', $source->read('core.entity_view_display.node.hg_news.default'));
  $config_storage->write('core.entity_form_display.node.hg_video.default', $source->read('core.entity_form_display.node.hg_video.default'));
}

/**
 * Drop the logging table. Mediacurrent didn't implement the other end and it never seemed
 * important enough to fix. When we finally did, we couldn't remember what it was for.
 *
 */
function hg_reader_update_8016() {
  $schema = Database::getConnection()->schema();
  $schema->dropTable('hg_reader_log');
}

